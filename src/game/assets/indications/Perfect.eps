%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.4 (Build 19E258a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 875 205
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 875 205
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
18.718733 71.048149 m
14.511619 96.361534 l
8.7162619 129.22862 3.9582748 154.27432 0.23751354 171.49937 c
10.651329 176.40094 21.865694 179.91098 33.880939 182.0296 c
45.896191 184.14821 57.883335 184.72922 69.842743 183.77266 c
81.802147 182.81609 92.44075 178.6891 101.75887 171.39157 c
111.07699 164.09406 117.24687 153.81487 120.26869 140.55368 c
120.31238 140.30594 l
123.54496 121.97304 118.24026 105.54094 104.3981 91.009155 c
94.857956 81.152748 84.038994 75.15802 71.94088 73.024796 c
68.792053 72.469574 65.516731 72.147484 62.114815 72.058525 c
62.717381 69.610329 63.841351 63.720509 65.486771 54.388897 c
67.132179 45.057285 69.994469 30.278112 74.0737 10.050941 c
74.117386 9.8031998 l
73.815056 9.5795946 73.581024 9.4531822 73.415298 9.4239597 c
69.007904 7.2844467 62.205372 5.4038014 53.007492 3.7819669 c
43.809612 2.1601326 36.832348 1.2704401 32.075485 1.1128625 c
28.908051 15.199844 24.455843 38.511372 18.718733 71.048149 c
h
46.041134 125.42181 m
47.584618 116.66827 49.383274 110.34396 51.437157 106.44871 c
52.182926 106.58021 l
63.783855 108.62576 71.566177 110.76432 75.530128 112.99594 c
79.49408 115.22755 82.227341 117.41245 83.730003 119.55066 c
85.389381 122.73829 86.000641 125.57078 85.563805 128.04819 c
84.13681 136.1411 80.592484 141.22098 74.930725 143.28799 c
68.314835 146.88972 61.195263 148.01848 53.571793 146.67426 c
50.257244 146.0898 47.642044 145.4158 45.72612 144.65224 c
43.810196 143.88867 42.783943 143.4097 42.647339 143.21532 c
43.337269 140.27164 43.929768 137.39597 44.424847 134.58823 c
46.041134 125.42181 l
h
W*
0 0 875 205 rc
-6.3410668 180.01451 m
114.62679 201.34441 l
147.42213 15.352684 l
26.45429 -5.977212 l
h
f
Q
q
185.60201 53.040283 m
241.05618 56.360176 l
244.91199 56.696362 248.42513 57.086845 251.59569 57.531635 c
251.63969 57.030426 l
252.32698 53.049953 252.93463 48.052517 253.46263 42.03796 c
253.99065 36.023407 253.67311 30.019392 252.51001 24.02574 c
181.16011 17.047192 l
169.59268 16.03863 158.99461 15.535456 149.36559 15.537652 c
137.79013 132.96188 l
136.13277 151.8409 135.05902 169.8446 134.56886 186.97356 c
162.76866 190.94743 187.09447 193.82596 207.54701 195.60921 c
227.99956 197.39246 238.3315 198.04079 238.54314 197.55418 c
239.35406 194.08954 239.93553 190.35243 240.28754 186.34273 c
241.66718 161.96825 l
241.68918 161.71764 l
234.45952 159.40379 224.80966 157.72069 212.7393 156.66827 c
199.66315 155.52817 l
190.2751 154.70963 182.41063 153.85558 176.06949 152.96599 c
175.31511 152.90022 l
175.08563 152.62769 l
176.24527 130.75926 l
176.6266 126.41541 177.27304 123.86239 178.1846 123.10012 c
187.28137 123.38821 197.61331 124.03653 209.18073 125.04509 c
209.20273 124.79449 l
209.9173 124.35175 210.56059 120.87254 211.1326 114.35677 c
212.7637 90.004211 l
209.33118 88.694832 203.71729 87.700317 195.92184 87.020638 c
188.12642 86.34095 183.67868 85.532288 182.57851 84.594612 c
182.21593 81.027657 182.26566 76.612877 182.72766 71.350143 c
183.18967 66.087402 184.05663 60.060406 185.32854 53.268963 c
185.60201 53.040283 l
h
W*
0 0 875 205 rc
127.46391 193.62198 m
244.32536 203.84604 l
260.49997 18.969431 l
143.63852 8.7453775 l
h
f
Q
q
386.49051 28.317337 m
353.77289 25.595049 l
349.57153 25.374866 346.62186 25.388218 344.92377 25.635103 c
344.67169 25.621891 l
331.09726 53.124294 318.31619 73.530533 306.32809 86.841232 c
305.78445 87.568459 l
305.59756 84.703697 305.72574 79.042549 306.16898 70.584839 c
306.61224 62.127136 307.97498 47.378132 310.25729 26.337387 c
305.64835 24.248508 296.36978 22.838589 282.42133 22.10758 c
266.54034 21.275293 l
267.21259 21.310524 266.16409 47.747604 263.39487 100.58733 c
260.62567 153.42706 258.01837 185.49231 255.57294 196.78403 c
275.086 200.66162 289.75787 202.858 299.58899 203.37323 c
309.42014 203.88846 316.78552 204.02257 321.68539 203.77553 c
331.45883 203.78392 340.51477 201.40359 348.85342 196.63449 c
365.00903 187.40482 374.19714 172.85599 376.418 152.98761 c
376.62994 152.15901 376.75784 151.32603 376.80173 150.48863 c
377.2406 142.11467 375.14554 133.85994 370.51645 125.72419 c
364.17792 111.62098 353.63641 103.76327 338.8916 102.15083 c
337.6312 102.08477 l
337.64435 101.83356 l
339.48288 98.906998 346.93253 88.591446 359.99347 70.886589 c
373.05444 53.181725 381.88669 38.992119 386.49051 28.317337 c
h
297.35156 132.72182 m
302.58755 132.4924 307.30612 132.48778 311.50748 132.70796 c
315.7088 132.92815 319.47681 133.37753 322.81152 134.05611 c
329.95883 135.94214 333.28229 141.65823 332.78198 151.20456 c
332.466 157.23381 330.12839 161.6456 325.76907 164.44003 c
322.07318 167.43719 317.57846 168.79703 312.28476 168.51961 c
306.99109 168.24217 300.96945 166.5831 294.2197 163.54233 c
294.51062 161.20642 294.89996 156.18872 295.38776 148.48907 c
295.87552 140.78943 296.44611 135.52933 297.09946 132.7086 c
297.35156 132.72182 l
h
W*
0 0 875 205 rc
250.09428 205.78619 m
381.83478 212.69041 l
391.79797 22.580999 l
260.0575 15.676772 l
h
f
Q
q
471.52115 95.377144 m
439.30734 91.605713 l
439.05566 91.605713 l
438.04898 80.207565 437.37787 59.674435 437.04233 30.005714 c
430.1633 29.335236 421.31296 29 410.49109 29 c
399.66922 29 393.8389 29.419043 393 30.257143 c
393.50333 200.47429 l
393.50333 200.72571 l
409.94589 203.57526 429.32431 205 451.63919 205 c
473.95407 205 492.07416 203.74287 506 201.22858 c
506 164.01714 l
469.42374 162.17332 447.02527 160.83238 438.80402 159.99429 c
437.12619 156.13902 436.28729 152.28383 436.28729 148.42857 c
436.28729 144.57332 436.83258 141.72382 437.92316 139.88 c
439.01373 138.03618 439.64291 137.11429 439.8107 137.11429 c
444.34079 136.61142 449.24829 136.36 454.53342 136.36 c
459.81851 136.36 465.48105 136.61142 471.52115 137.11429 c
472.02451 135.77333 472.27618 132.25336 472.27618 126.55428 c
472.02451 107.44572 l
472.02451 102.75236 472.1084 98.897156 472.27618 95.879997 c
472.27618 95.544762 472.02451 95.377144 471.52115 95.377144 c
h
W*
0 0 875 205 rc
388 210 m
511 210 l
511 24 l
388 24 l
h
f
Q
q
555.11694 63.470058 m
610.49506 59.066284 l
614.36029 58.864407 617.8938 58.763828 621.09558 58.764542 c
621.06921 58.262104 l
621.19391 54.225048 621.09778 49.191963 620.7807 43.162708 c
620.46362 37.133453 619.31073 31.231911 617.3219 25.457907 c
545.69183 28.443331 l
534.09613 29.048958 523.53094 30.020607 513.99591 31.358305 c
518.93146 149.24525 l
519.9267 168.17043 521.37762 186.14784 523.28424 203.17807 c
551.76459 203.20204 576.25562 202.67862 596.75818 201.6078 c
617.26068 200.53697 627.58264 199.74597 627.72424 199.23476 c
628.04346 195.69136 628.09741 191.90996 627.88599 187.89046 c
625.84833 163.56183 l
625.83508 163.31062 l
618.35266 162.02202 608.56171 161.69371 596.46185 162.32567 c
583.3537 163.01028 l
573.94269 163.50182 566.03552 163.74686 559.63184 163.74544 c
558.87561 163.78493 l
558.61035 163.54688 l
556.70477 141.73044 l
556.47577 137.37598 556.7594 134.75813 557.5556 133.87686 c
566.60406 132.90045 576.92603 132.10944 588.52167 131.50381 c
588.50848 131.25259 l
589.1543 130.71504 589.30542 127.18048 588.96198 120.64879 c
587.17633 96.306999 l
583.59436 95.486443 577.89624 95.280243 570.08173 95.688377 c
562.26721 96.096519 557.74988 95.912613 556.52942 95.136658 c
555.6723 91.654701 555.10498 87.275993 554.82758 82.000389 c
554.55011 76.724792 554.56696 70.636208 554.87805 63.734444 c
555.11694 63.470058 l
h
W*
0 0 875 205 rc
517.14984 210.78679 m
634.25073 204.6498 l
624.53717 19.30435 l
507.43631 25.441349 l
h
f
Q
q
717.73279 87.884407 m
729.04865 86.897774 l
735.92206 86.298485 740.32788 85.493469 742.2663 84.482719 c
743.38538 77.987854 743.69556 71.900299 743.1969 66.219887 c
741.62756 48.343292 733.6532 34.476532 719.27368 24.619194 c
709.56091 17.890306 698.74597 14.961269 686.82861 15.831992 c
683.2641 15.637733 679.38635 15.723311 675.19525 16.088732 c
671.00415 16.454153 665.7821 17.58285 659.52899 19.474855 c
653.27588 21.366863 647.25177 25.385311 641.45642 31.530319 c
635.66113 37.675327 632.73309 45.211643 632.67224 54.139488 c
633.24835 68.398987 634.36871 85.009773 636.03345 103.97233 c
641.28052 163.74167 l
641.5152 166.41481 642.85101 170.08615 645.28809 174.75581 c
649.08301 183.34747 654.33118 190.213 661.03265 195.35258 c
664.60553 197.56631 669.04907 199.11487 674.36334 199.99832 c
680.90979 201.44774 686.44617 201.97511 690.97253 201.58044 c
705.22229 200.33803 716.22687 196.76915 723.98676 190.87372 c
743.29529 176.05893 752.07672 158.71107 750.33136 138.82964 c
749.7887 132.64801 748.2182 126.30357 745.61975 119.79613 c
741.69061 119.29696 736.79236 119.30317 730.92487 119.81476 c
725.05731 120.32635 717.74707 121.72128 708.99396 123.99962 c
708.82001 125.86663 708.81787 128.72871 708.98761 132.58597 c
709.15729 136.44322 709.17719 139.55591 709.04718 141.92413 c
708.65735 149.02882 706.71368 153.82784 703.21619 156.32133 c
701.30713 157.66623 699.4306 158.41905 697.58655 158.57985 c
695.74243 158.74063 692.99261 158.68578 689.33691 158.4153 c
685.68127 158.14481 683.03308 157.32353 681.39227 155.95145 c
680.85999 155.66115 680.36755 154.86235 679.91492 153.55501 c
678.05414 149.67686 676.31708 138.54904 674.70374 120.17124 c
673.09039 101.79343 672.29633 88.899925 672.32153 81.490334 c
672.51868 68.341866 676.62177 60.240139 684.63098 57.184921 c
685.62219 56.930149 686.53687 56.766224 687.37512 56.693142 c
698.60724 55.713814 705.12732 62.63678 706.93561 77.46225 c
707.61664 83.295113 708.20544 87.115768 708.70203 88.924316 c
710.19617 88.625694 713.20636 88.27906 717.73279 87.884407 c
h
W*
0 0 875 205 rc
640.38025 211.0258 m
760.74554 200.49521 l
743.64899 5.080708 l
623.28369 15.611306 l
h
f
Q
q
773.05054 8.7559948 m
779.21661 42.157307 l
784.82727 73.868271 789.83337 106.02557 794.23511 138.63016 c
794.0304 138.92159 l
791.3103 140.93225 785.86316 142.74091 777.6889 144.34763 c
769.51459 145.95435 765.19354 146.88396 764.72559 147.13647 c
764.08185 149.29315 764.58551 155.0372 766.23657 164.36882 c
767.88763 173.70044 769.34644 180.97958 770.61298 186.20651 c
770.45209 186.74567 l
782.11145 185.03743 792.74707 183.33878 802.35925 181.64967 c
811.9715 179.96059 822.90204 177.99724 835.15125 175.7596 c
847.40051 173.52197 860.67078 170.29601 874.96259 166.08162 c
874.32971 160.57306 873.42883 154.51564 872.25995 147.90918 c
871.09106 141.30273 869.39581 134.61859 867.17413 127.85654 c
865.24384 128.53633 861.79279 129.31306 856.82098 130.18674 c
851.84918 131.06039 845.19092 132.06012 836.84613 133.18591 c
836.10034 133.31697 l
835.65198 132.71457 834.14209 125.14639 831.5705 110.61219 c
828.99896 96.077995 823.06732 59.655693 813.77545 1.3441819 c
813.68781 0.84870046 l
809.92493 0.82874793 804.0661 1.5176988 796.11115 2.9155736 c
789.94025 4.2553983 l
781.98535 5.6532731 776.20935 6.3276629 772.61218 6.2785883 c
773.05054 8.7559948 l
h
W*
0 0 875 205 rc
766.22528 193.09882 m
881.7146 172.73492 l
849.09082 -12.28379 l
733.6015 8.0800953 l
h
f
ep
end
%%Trailer
%%EOF
